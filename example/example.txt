/**************************************************************************************************
Nom du fichier : main.cpp
Auteur : Mathieu Durand
Date de création : 2023/10/16

Description : Fichier principale Arduino
              
Notes : 

Modifications : 

***************************************************************************************************/

// *************************************************************************************************
//  INCLUDES
// *************************************************************************************************	

#include <Arduino.h>
#include <LibRobus.h>
#include <RobusDraw.h>
#include "PencilColor.h"

// *************************************************************************************************
//  CONSTANTES
// *************************************************************************************************
/* VIDE */

#define INTEGRATION_ITERATION 50

// *************************************************************************************************
//  FONCTIONS LOCALES
// *************************************************************************************************
/* VIDE */

// *************************************************************************************************
//  STRUCTURES ET UNIONS
// *************************************************************************************************
/* VIDE */

// *************************************************************************************************
// VARIABLES GLOBALES
// *************************************************************************************************
/* VIDE */

bool lastButtonG = false;
bool lastButtonA = false;

//7.51969

/**
 * @brief Initialisation du programme.
 * @author Mathieu Durand
 */
void setup()
{   
    BoardInit();
    Serial.begin(9600); // 115200 ou 9600
    RobusDraw::initialize(10);
    Serial.println("Successfully initialized SD card!");
    RobusDraw::setPrecision(0.5);
    RobusPosition::setCurveTightness(50);
    RobusPosition::setFollowAngularVelocityScale(3); //3
    RobusMovement::setPIDAngular(0.5, 0, 0.01, 0);
}

/**
 * @brief Boucle du programme.
 * @author Mathieu Durand
*/
void loop()
{
    bool currentButtonA = ROBUS_IsBumper(FRONT);
    if (!currentButtonA && lastButtonA) {
        RobusDraw::stopDrawing();
        RobusDraw::loadDrawing("sherc.txt");
        //RobusDraw::restartDrawing();
    }
    lastButtonA = currentButtonA;

    bool currentButtonG = ROBUS_IsBumper(LEFT);
    if (!currentButtonG && lastButtonG) {
        //RobusDraw::stopDrawing();
        //RobusDraw::loadDrawing("sher.txt");
    }
    lastButtonG = currentButtonG;

    if (RobusDraw::isDrawingLoaded() && !RobusDraw::isDrawingRunning()) {
        RobusDraw::startDrawing();
    }

    //delay(0);
    RobusDraw::update();
}